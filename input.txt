-- `i` combinator
λ x, x
-- `k` combinator
λ x y, x
-- `s` combinator
λ x y z, x z (y z)
-- `s k k`
(λ x y z, x z (y z)) (λ x y, x) (λ x y, x)
-- `s (k (s (k (s (k (s s (s k))))) (s (s (k s) k)))) k`
-- https://pedrominicz.github.io/arrow
(λ x y z, x z (y z)) ((λ x y, x) ((λ x y z, x z (y z)) ((λ x y, x) ((λ x y z, x z (y z)) ((λ x y, x) ((λ x y z, x z (y z)) (λ x y z, x z (y z)) ((λ x y z, x z (y z)) (λ x y, x)))))) ((λ x y z, x z (y z)) ((λ x y z, x z (y z)) ((λ x y, x) (λ x y z, x z (y z))) (λ x y, x))))) (λ x y, x)
-- `true`
λ t f, t
-- `false`
λ t f, f
-- zero
λ s z, z
-- one
λ s z, s z
-- two
λ s z, s (s z)
-- `succ`
λ n, λ s z, n s (s z)
(λ n, λ s z, n s (s z)) (λ s z, z)
(λ n, λ s z, n s (s z)) (λ s z, s z)
(λ n, λ s z, n s (s z)) (λ s z, s (s z))
-- `is_zero`
λ n, n ((λ x y, x) (λ t f, f)) (λ t f, t)
(λ n, n ((λ x y, x) (λ t f, f)) (λ t f, t)) (λ s z, z)
(λ n, n ((λ x y, x) (λ t f, f)) (λ t f, t)) (λ s z, s z)
(λ n, n ((λ x y, x) (λ t f, f)) (λ t f, t)) (λ s z, s (s z))
(λ n, n ((λ x y, x) (λ t f, f)) (λ t f, t)) (λ s z, s (s (s (s (s (s z))))))
-- `pred`
λ n, λ s z, n (λ f g, g (f s)) (λ f, z) (λ x, x)
(λ n, λ s z, n (λ f g, g (f s)) (λ f, z) (λ x, x)) (λ s z, z)
(λ n, λ s z, n (λ f g, g (f s)) (λ f, z) (λ x, x)) (λ s z, s z)
(λ n, λ s z, n (λ f g, g (f s)) (λ f, z) (λ x, x)) (λ s z, s (s z))
(λ n, λ s z, n (λ f g, g (f s)) (λ f, z) (λ x, x)) (λ s z, s (s (s (s (s (s z))))))
-- `add`
λ n m, λ s z, n s (m s z)
(λ n m, λ s z, n s (m s z)) (λ s z, z) (λ s z, z)
(λ n m, λ s z, n s (m s z)) (λ s z, s z) (λ s z, s z)
(λ n m, λ s z, n s (m s z)) (λ s z, s (s z)) (λ s z, z)
(λ n m, λ s z, n s (m s z)) (λ s z, s (s (s z))) (λ s z, s (s (s z)))
-- `mul`
λ n m, λ s z, n (m s) z
(λ n m, λ s z, n (m s) z) (λ s z, s z) (λ s z, s z)
(λ n m, λ s z, n (m s) z) (λ s z, s (s z)) (λ s z, s (s z))
(λ n m, λ s z, n (m s) z) (λ s z, s (s z)) (λ s z, s (s (s z)))
(λ n m, λ s z, n (m s) z) (λ s z, s (s (s (s z)))) (λ s z, z)
(λ n m, λ s z, n (m s) z) (λ s z, z) (λ s z, z)
-- `exp`
λ n m, m n
(λ n m, m n) (λ s z, z) (λ s z, z)
(λ n m, m n) (λ s z, s z) (λ s z, s (s (s (s z))))
(λ n m, m n) (λ s z, z) (λ s z, s (s (s (s z))))
(λ n m, m n) (λ s z, s (s (s (s z)))) (λ s z, z)
(λ n m, m n) (λ s z, s (s z)) (λ s z, s (s (s (s z))))
-- factorial
-- https://www.flownet.com/ron/lambda-calculus.html
λ n f, n (λ c i, (i (c (λ f x, i f (f x))))) (λ x, f) (λ x, x)
(λ n f, n (λ c i, (i (c (λ f x, i f (f x))))) (λ x, f) (λ x, x)) (λ s z, z)
(λ n f, n (λ c i, (i (c (λ f x, i f (f x))))) (λ x, f) (λ x, x)) (λ s z, s (s z))
(λ n f, n (λ c i, (i (c (λ f x, i f (f x))))) (λ x, f) (λ x, x)) (λ s z, s (s (s z)))
(λ n f, n (λ c i, (i (c (λ f x, i f (f x))))) (λ x, f) (λ x, x)) (λ s z, s (s (s (s z))))
