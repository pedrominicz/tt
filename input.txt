-- `i` combinator
λx.x
-- `k` combinator
λxy.x
-- `s` combinator
λxyz.xz(yz)
-- `skk`
(λxyz.xz(yz))(λxy.x)(λxy.x)
-- `s(k(s(k(s(k(ss(sk)))))(s(s(ks)k))))k`
-- https://pedrominicz.github.io/arrow
(λxyz.xz(yz))((λxy.x)((λxyz.xz(yz))((λxy.x)((λxyz.xz(yz))((λxy.x)((λxyz.xz(yz))(λxyz.xz(yz))((λxyz.xz(yz))(λxy.x))))))((λxyz.xz(yz))((λxyz.xz(yz))((λxy.x)(λxyz.xz(yz)))(λxy.x)))))(λxy.x)
-- `true`
λtf.t
-- `false`
λtf.f
-- zero
λsz.z
-- one
λsz.sz
-- two
λsz.s(sz)
-- `succ`
λn.λsz.ns(sz)
(λn.λsz.ns(sz))(λsz.z)
(λn.λsz.ns(sz))(λsz.sz)
(λn.λsz.ns(sz))(λsz.s(sz))
-- `is_zero`
λn.n((λxy.x)(λtf.f))(λtf.t)
(λn.n((λxy.x)(λtf.f))(λtf.t))(λsz.z)
(λn.n((λxy.x)(λtf.f))(λtf.t))(λsz.sz)
(λn.n((λxy.x)(λtf.f))(λtf.t))(λsz.s(sz))
(λn.n((λxy.x)(λtf.f))(λtf.t))(λsz.s(s(s(s(s(sz))))))
-- `pred`
λn.λsz.n(λfg.g(fs))(λf.z)(λx.x)
(λn.λsz.n(λfg.g(fs))(λf.z)(λx.x))(λsz.z)
(λn.λsz.n(λfg.g(fs))(λf.z)(λx.x))(λsz.sz)
(λn.λsz.n(λfg.g(fs))(λf.z)(λx.x))(λsz.s(sz))
(λn.λsz.n(λfg.g(fs))(λf.z)(λx.x))(λsz.s(s(s(s(s(sz))))))
-- `add`
λnm.λsz.ns(msz)
(λnm.λsz.ns(msz))(λsz.z)(λsz.z)
(λnm.λsz.ns(msz))(λsz.sz)(λsz.sz)
(λnm.λsz.ns(msz))(λsz.s(sz))(λsz.z)
(λnm.λsz.ns(msz))(λsz.s(s(sz)))(λsz.s(s(sz)))
-- `mul`
λnm.λsz.n(ms)z
(λnm.λsz.n(ms)z)(λsz.sz)(λsz.sz)
(λnm.λsz.n(ms)z)(λsz.s(sz))(λsz.s(sz))
(λnm.λsz.n(ms)z)(λsz.s(sz))(λsz.s(s(sz)))
(λnm.λsz.n(ms)z)(λsz.s(s(s(sz))))(λsz.z)
(λnm.λsz.n(ms)z)(λsz.z)(λsz.z)
-- `exp`
λnm.mn
(λnm.mn)(λsz.z)(λsz.z)
(λnm.mn)(λsz.sz)(λsz.s(s(s(sz))))
(λnm.mn)(λsz.z)(λsz.s(s(s(sz))))
(λnm.mn)(λsz.s(s(s(sz))))(λsz.z)
(λnm.mn)(λsz.s(sz))(λsz.s(s(s(sz))))
-- factorial
-- http://www.flownet.com/ron/lambda-calculus.html
λnf.n(λci.(i(c(λfx.if(fx)))))(λx.f)(λx.x)
(λnf.n(λci.(i(c(λfx.if(fx)))))(λx.f)(λx.x))(λsz.z)
(λnf.n(λci.(i(c(λfx.if(fx)))))(λx.f)(λx.x))(λsz.s(sz))
(λnf.n(λci.(i(c(λfx.if(fx)))))(λx.f)(λx.x))(λsz.s(s(sz)))
(λnf.n(λci.(i(c(λfx.if(fx)))))(λx.f)(λx.x))(λsz.s(s(s(sz))))
